{"version":3,"sources":["components/ResultComponent.js","components/SearchBoxComponent.js","components/LandingPage.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","elevation","variant","ResultComponent","state","nominationsList","openSuccessBar","addNomination","bind","removeNomination","updateSuccessBar","e","selectedMovie","title","currentTarget","parentNode","innerText","id","getAttribute","this","length","setState","prevState","target","disabled","selectedMovieId","currentMovieIndex","forEach","movie","index","splice","document","getElementById","forceUpdate","status","className","Snackbar","autoHideDuration","open","onClose","severity","Paper","Typography","search","result","map","item","Title","onClick","data","imdbID","React","Component","SearchBoxComponent","userSearch","undefined","searchResult","errorMessage","noDataFromAPI","isLoading","openInformationBar","getMovies","searchValue","a","fetch","response","json","ok","Response","Search","value","onChange","newUserSearch","onRequestSearch","onCancelSearch","placeholder","updateInformationBar","LandingPage","align","color","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.edccc0a5.chunk.js","sourcesContent":["import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport \"../styles/ResultComponentCss.css\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport { Typography } from \"@material-ui/core\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nclass ResultComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { nominationsList: [], openSuccessBar: false };\n    this.addNomination = this.addNomination.bind(this);\n    this.removeNomination = this.removeNomination.bind(this);\n    this.updateSuccessBar = this.updateSuccessBar.bind(this);\n  }\n\n  addNomination(e) {\n    let selectedMovie = {};\n    selectedMovie.title = e.currentTarget.parentNode.innerText;\n    selectedMovie.id = e.currentTarget.getAttribute(\"data\");\n\n    if (this.state.nominationsList.length < 5) {\n      this.setState((prevState) => ({\n        nominationsList: [...prevState.nominationsList, selectedMovie]\n      }));\n      e.target.disabled = true;\n    }\n  }\n\n  removeNomination(e) {\n    let selectedMovieId = e.currentTarget.parentNode.getAttribute(\"data\");\n    let currentMovieIndex = -1;\n\n    this.state.nominationsList.forEach((movie, index) => {\n      if (movie.id === selectedMovieId) {\n        currentMovieIndex= index;\n      }\n    });\n \n    if (currentMovieIndex >= 0) {\n      this.state.nominationsList.splice(currentMovieIndex, 1);\n      const button = document.getElementById(selectedMovieId);\n      button.disabled = false;\n    }\n\n    this.forceUpdate();\n  }\n\n  updateSuccessBar(status) {\n    this.setState({ openSuccessBar: status });\n  }\n\n  render() {\n    return (\n      <div className=\"root\">\n        <Snackbar\n          autoHideDuration={4000}\n          open={this.state.openSuccessBar}\n          onClose={() => this.updateSuccessBar(false)}\n        >\n          <Alert\n            onClose={() => this.updateSuccessBar(false)}\n            severity=\"success\"\n          >\n            You have successfully selected your 5 nominees\n          </Alert>\n        </Snackbar>\n        <Paper className=\"search-result\" elevation={3}>\n          <Typography>Results for \"{this.props.search}\"</Typography>\n          <ul>\n            {this.props.result.map((item, index) => {\n              return (\n                <div key={index}>\n                  <li className=\"list\" key={index}>\n                    <span>{item.Title}</span>\n\n                    <button\n                      className=\"button\"\n                      onClick={(e) => {\n                        this.addNomination(e);\n                        this.updateSuccessBar(\n                          this.state.nominationsList.length >= 4\n                        );\n                      }}\n                      data={item.imdbID}\n                      id={item.imdbID}\n                    >\n                      Nominate\n                    </button>\n                  </li>\n                </div>\n              );\n            })}\n          </ul>\n        </Paper>\n        <Paper className=\"nominationBox\" elevation={3}>\n          <Typography>Nominations</Typography>\n\n          <ul>\n            {this.state.nominationsList.map((item, index) => {\n              return (\n                <div key={index}>\n                  <li className=\"list\" data={item.id}>\n                    <span>{item.title}</span>\n                    <button className=\"button\" onClick={this.removeNomination}>\n                      Remove\n                    </button>\n                  </li>\n                </div>\n              );\n            })}\n          </ul>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default ResultComponent;\n","import React from \"react\";\nimport SearchBar from \"material-ui-search-bar\";\nimport ResultComponent from \"./ResultComponent\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nclass SearchBoxComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userSearch: undefined,\n      searchResult: undefined,\n      errorMessage: undefined,\n      noDataFromAPI: undefined,\n      isLoading: false,\n      openInformationBar: true,\n    };\n\n    this.getMovies = this.getMovies.bind(this);\n  }\n  //getMovies Promise on ser search action will resolve in an api response of the list of movies\n  async getMovies(searchValue) {\n    const response = await fetch(\n      `https://www.omdbapi.com/?apikey=a2455e33&type=movie&s=${searchValue}`\n    );\n    const data = await response.json();\n\n    // setting up the state (i.e., searchResult) with the data from the api repsonse\n\n    if (response.ok) {\n      if (data.Response === \"True\") {\n        this.setState({\n          searchResult: data.Search,\n          isLoading: true,\n          noDataFromAPI: false\n        });\n      } else {\n        this.setState({ noDataFromAPI: true, openInformationBar: true }); //If there is no data available from the API, show an information bar message to the user\n      }\n    } else {\n      this.setState({\n        errorMessage: \"Sorry ! Something has gone wrong, please try again!\"\n      });\n    }\n  }\n\n  updateInformationBar(status) {\n    this.setState({ openInformationBar: status });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <SearchBar\n            value={this.state.userSearch}\n            onChange={(newUserSearch) =>\n              this.setState({ userSearch: newUserSearch, isLoading: false })\n            }\n            onRequestSearch={() => this.getMovies(this.state.userSearch)}\n            onCancelSearch={() =>\n              this.setState({ userSearch: undefined, isLoading: false })\n            }\n            placeholder=\"Search Movie Title\"\n          />\n        </div>\n        <div>\n          {this.state.noDataFromAPI && (\n            <Snackbar\n              open={this.state.openInformationBar}\n              autoHideDuration={4000}\n              onClose={() => this.updateInformationBar(false)}\n            >\n              <Alert\n                onClose={() => this.updateInformationBar(false)}\n                severity=\"info\"\n              >\n                Sorry ! It is us and not you. We do not have data available at\n                this time\n              </Alert>\n            </Snackbar>\n          )}\n          {this.state.isLoading && (\n            <ResultComponent\n              result={this.state.searchResult}\n              search={this.state.userSearch}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBoxComponent;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport \"../styles/LandingPage.css\";\nimport SearchBoxComponent from \"./SearchBoxComponent\";\n\nclass LandingPage extends React.Component {\n  render() {\n    return (\n      <div>\n        <div className=\"searchComponent\">\n          <SearchBoxComponent />\n        </div>\n        <div className=\"footer\">\n          <Typography align=\"center\" color=\"inherit\" variant=\"body2\">\n            Maher Bouidani@2021 Shopify Front End Internship Challenge{\" \"}\n          </Typography>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LandingPage;\n","import \"./App.css\";\nimport LandingPage from \"./components/LandingPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LandingPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}